// Input Fields Color Maps
$inputColor-map: ("color-1": #152935, "color-2": #5a6872, "color-3": #EFEFEF, "color-5": #3d70b2);

// getInputColor(<requiredColor>, <propertyNametoApply>)
@mixin getInputColor($color, $property) {
    @if map-has-key($inputColor-map, $color) {
        #{$property}: map-get($inputColor-map, $color);
    }

    @else {
        @warn 'This is not define in the HCL design System - `#{$color} #{$property}`';
    }
}

// getFormControl(<control>)
@mixin getFormControl($which) {
    @if ($which=="inputcontrol") {
        font-size: 0.875rem;
        width: 100%;
        height: $input-height;
        padding: $input-padding-y $input-padding-x;
        @include getInputColor('color-1', "color");
        @include getInputColor('color-3', "background-color");
        border: none;
        box-shadow: 0 1px 0 0 #5a6872;
        border-bottom: 1px solid transparent;
        order: 3;

        &:focus {
            outline: none;
            box-shadow: 0 2px 0 0 var(--blue-light);

            &~label {
                color: var(--blue-light);
            }
        }

        &[disabled] {
            opacity: 0.5;
            cursor: not-allowed;
            background-color: $background-disabled;

            &~label,
            &~.#{$prefix}-error-msg,
            &~.#{$prefix}-helper-text {
                opacity: 0.5;
            }
        }
    }

    @else {
        @warn 'This is not define in the HCL design System!';
    }
}

// getErrorMarkup(<control>)
@mixin getErrorMarkup($which) {
    @if ($which=="inputcontrol") {
        ~.#{$prefix}-error-msg {
            @include getFontWeight("regular");
            font-size: 0.75rem;
            line-height: getLineHeight(0.75rem);
            order: 4;
            margin-top: .25rem;
            max-height: 12.5rem;
        }
    }

    @else {
        @warn 'This is not define in the HCL design System! - `#{$which}`';
    }
}

@mixin groupOption($which) {
    >.#{$prefix}-#{$which}-item:not(:first-of-type) {
        margin-left: 1rem;
    }

    &.#{$prefix}-stack-vertical {
        >.#{$prefix}-#{$which}-item:not(:first-of-type) {
            margin-left: 0;
        }
    }
}