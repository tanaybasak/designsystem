/******************************************************************
 * HCL Confidential
 *
 * Copyright HCL Technologies Ltd. 2019 All rights reserved.
 *
 *******************************************************************
 */

/* MIXINS SPECIFIC TO TYPOGRAPHY */

//px to rem
@mixin pxtorem($value) {
    font-size: ($value /16) + rem;
}

// Font weight
$fontWeights-map: ( light: 300, regular: 400, semibold: 600, bold: 800);
@mixin getFontWeight($fontWeight) {
    @if map-has-key($fontWeights-map, $fontWeight) {
        font-weight: map-get($fontWeights-map, $fontWeight);
    }
    @else {
        @warn 'This is not define in the HCL design System!';
    }
}

@each $textWeightkey,
$textWeightvalue in $fontWeights-map {
    .#{$prefix}-textweight-#{$textWeightkey} {
        font-weight: $textWeightkey;
    }
}

// Font style
$textStyles-map: (underline, italic, strike-through, overline, line-through);
@each $textStyle in $textStyles-map {
    .#{$prefix}-textstyle-#{$textStyle} {
        font-style: $textStyle;
    }
}

//Text decoration style
$textDecorationStyle-map: (solid, double, dotted, dashed, through);
@each $textDecorationStyle in $textDecorationStyle-map {
    @if( $textDecorationStyle==through) {
        .#{$prefix}-textdecorstyle-#{$textDecorationStyle} {
            text-decoration-style: line-through;
        }
    }
    @else {
        .#{$prefix}-textdecorstyle-#{$textDecorationStyle} {
            text-decoration-style: $textDecorationStyle;
        }
    }
}

//Text decoration line
$textDecorationLine-map: (overline, underline, through, overunder);
@each $textDecorationLine in $textDecorationLine-map {
    @if($textDecorationLine==through) {
        .#{$prefix}-textdecorline-#{$textDecorationLine} {
            text-decoration-line: line-through;
        }
    }
    @if($textDecorationLine==overunder) {
        .#{$prefix}-textdecorline-#{$textDecorationLine} {
            text-decoration-line: overline underline;
        }
    }
    @else {
        .#{$prefix}-textdecorline-#{$textDecorationLine} {
            text-decoration-line: $textDecorationLine;
        }
    }
}

// Text transforms
$textTransforms-map: (uppercase, lowercase, capitalize);
@each $textTransform in $textTransforms-map {
    .#{$prefix}-texttransform-#{$textTransform} {
        text-transform: $textTransform;
    }
}

// Text alignment
$textAlignment-map: (center, left, right, justify);
@each $textAlignment in $textAlignment-map {
    .#{$prefix}-textalign-#{$textAlignment} {
        text-align: $textAlignment;
    }
}

// Font Sizes
$typeSizes-map: ( "h1": 4.75rem, "h2": 3.375rem, "h3": 2.25rem, "h4": 1.75rem, "h5": 1.25rem, "h6": 1.125rem, "16": 1rem, "11": 0.6875rem, "12": 0.75rem, "14": 0.875rem);
@mixin getFontSize($size) {
    @if map-has-key($typeSizes-map, $size) {
        font-size: map-get($typeSizes-map, $size);
    }
    @else {
        @warn 'This is not define in the HCL design System!';
    }
}

// White Space
$whiteSpaces-map: (nowrap, normal, pre);
@each $whiteSpaces in $whiteSpaces-map {
    .#{$prefix}-whitespace-#{whiteSpaces} {
        white-space: $whiteSpaces;
    }
}

// Writing Mode
$writingMode-map: (htb, vrl);
@each $writingMode in $writingMode-map {
    @if( $writingMode==htb) {
        .#{$prefix}-writingmode-#{$writingMode} {
            writing-mode: horizontal-tb;
        }
    }
    @else {
        .#{$prefix}-writingmode-#{$writingMode} {
            writing-mode: vertical-rl;
        }
    }
}

// Text overflow
.#{$prefix}-textoverflow-ellipsis {
    text-overflow: ellipsis;
}

// LINE HEIGHT
@mixin lineHeight($type) {
    @if ($type=="heading") {
        line-height: 1.125;
    }
    @else {
        line-height: 1.15;
    }
}